plugins {
    id 'fabric-loom'
    id 'maven-publish'
    id "org.jetbrains.kotlin.jvm"
}

archivesBaseName = project.archives_base_name
version = project.root_version
group = project.maven_group

project(':lcc-ct') {
    version = project.ct_version
}
project(':lcc-creative-ex') {
    version = project.creative_ex_version
}
project(':lcc-energy') {
    version = project.energy_version
}
project(':lcc-hooks') {
    version = project.hooks_version
}
project(':lcc-infra') {
    version = project.infra_version
}
project(':lcc-subblock') {
    version = project.subblock_version
}

project(':lcc-content') {
    version = rootProject.version
}

project(':lcc-data') {
    version = project.data_version
}
project(':lcc-content-data') {
    version = rootProject.version
}

allprojects {

    apply plugin: 'fabric-loom'
    apply plugin: 'maven-publish'
    apply plugin: "org.jetbrains.kotlin.jvm"

    group = rootProject.group

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    compileKotlin.kotlinOptions.jvmTarget = "17"
    compileKotlin.kotlinOptions.freeCompilerArgs += "-Xjvm-default=all"

    ext {
        dataTask = path == ":lcc-data" || path == ":lcc-content-data"
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = "UTF-8"
        it.options.release = 17
    }

    repositories {
        maven { url = "https://maven.fabricmc.net/" }
        maven { url = 'https://maven.minecraftforge.net/' }
        maven {
            name = 'Ladysnake Mods'
            url = 'https://ladysnake.jfrog.io/artifactory/mods'
        }
        maven {
            url = "https://maven.shedaniel.me"
        }
    }

    dependencies {
        //to change the versions see the gradle.properties file
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

        // Fabric API. This is technically optional, but you probably want it anyway.
        modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

        modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

        // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
        // You may need to force-disable transitiveness on them.
    }

    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = "sources"
        from sourceSets.main.allSource
    }

    configurations {
        dev
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()
    }

    jar {
        archiveClassifier = "dev"
        from(rootProject.file("LICENSE.md")) {
            rename { "LICENSE_${project.archivesBaseName.replace('-', '_')}"}
        }
    }

    processResources {
        inputs.property "version", project.version

        filesMatching("fabric.mod.json") {
            expand "version": project.version
        }
    }

    afterEvaluate {
        artifacts {
            dev file: file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar"), type: "jar", builtBy: jar
        }
    }

}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    it.options.release = 17
}

subprojects.each { remapJar.dependsOn("${it.path}:remapJar") }

dependencies {
    afterEvaluate {
        subprojects.each {
            if (!it.dataTask) {
                implementation project(path: ":${it.name}", configuration: "dev")
                include project("${it.name}:")
            }
        }
    }
}